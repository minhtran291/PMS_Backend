// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMS.Data.DatabaseConfig;

#nullable disable

namespace PMS.Data.Migrations
{
    [DbContext(typeof(PMSContext))]
    [Migration("20251023140549_Updata_Sales_Quotation_Note")]
    partial class Updata_Sales_Quotation_Note
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.CustomerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageByt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageCnkd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Mshkd")
                        .HasColumnType("bigint");

                    b.Property<long?>("Mst")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.LotProduct", b =>
                {
                    b.Property<int>("LotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LotID"));

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("InputDate")
                        .HasColumnType("date");

                    b.Property<decimal>("InputPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LotQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouselocationID")
                        .HasColumnType("int");

                    b.HasKey("LotID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouselocationID")
                        .IsUnique()
                        .HasFilter("[WarehouselocationID] IS NOT NULL");

                    b.ToTable("LotProducts");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Type")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCurrentQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingOrder", b =>
                {
                    b.Property<int>("POID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("POID"));

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("POID");

                    b.HasIndex("QID");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasingOrders");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingOrderDetail", b =>
                {
                    b.Property<int>("PODID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PODID"));

                    b.Property<string>("DVT")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<int>("POID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PODID");

                    b.HasIndex("POID");

                    b.ToTable("PurchasingOrderDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingRequestForQuotation", b =>
                {
                    b.Property<int>("PRFQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PRFQID"));

                    b.Property<string>("MyAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MyPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PRFQID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasingRequestForQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingRequestProduct", b =>
                {
                    b.Property<int>("PRPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PRPID"));

                    b.Property<int>("PRFQID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("PRPID");

                    b.HasIndex("PRFQID");

                    b.HasIndex("ProductID");

                    b.ToTable("PurchasingRequestProducts");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Quotation", b =>
                {
                    b.Property<int>("QID")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuotationExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("QID");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.QuotationDetail", b =>
                {
                    b.Property<int>("QDID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QDID"));

                    b.Property<DateTime>("ProductDate")
                        .HasColumnType("date");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("QID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("QDID");

                    b.HasIndex("QID");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.RequestSalesQuotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RequestSalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.RequestSalesQuotationDetails", b =>
                {
                    b.Property<int>("RequestSalesQuotationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("RequestSalesQuotationId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("RequestSalesQuotationDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotaionDetails", b =>
                {
                    b.Property<int>("SqId")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("SqId", "LotId");

                    b.HasIndex("LotId");

                    b.HasIndex("TaxId");

                    b.ToTable("SalesQuotaionDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("QuotationCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("QuotationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RsqId")
                        .HasColumnType("int");

                    b.Property<int>("SqnId")
                        .HasColumnType("int");

                    b.Property<int>("SqvId")
                        .HasColumnType("int");

                    b.Property<int>("SsId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("RsqId");

                    b.HasIndex("SqnId");

                    b.HasIndex("SqvId");

                    b.HasIndex("SsId");

                    b.ToTable("SalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotationComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("SqId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SqId");

                    b.HasIndex("UserId");

                    b.ToTable("SalesQuotationComments");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotationNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("SalesQuotationNotes");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotationValidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SalesQuotationValidities");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.StaffProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MyDebt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.TaxPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TaxPolicies");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.WarehouseLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnNo")
                        .HasColumnType("int");

                    b.Property<int>("LevelNo")
                        .HasColumnType("int");

                    b.Property<int>("LotID")
                        .HasColumnType("int");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseLocations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("RefreshTokenExpriryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<byte>("UserStatus")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PMS.Core.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PMS.Core.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PMS.Core.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.CustomerProfile", b =>
                {
                    b.HasOne("PMS.Core.Domain.Identity.User", "User")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("PMS.Core.Domain.Entities.CustomerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.LotProduct", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Product", "Product")
                        .WithMany("LotProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.Supplier", "Supplier")
                        .WithMany("LotProducts")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.WarehouseLocation", "WarehouseLocation")
                        .WithOne("LotProduct")
                        .HasForeignKey("PMS.Core.Domain.Entities.LotProduct", "WarehouselocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("WarehouseLocation");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Notification", b =>
                {
                    b.HasOne("PMS.Core.Domain.Identity.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Identity.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Product", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingOrder", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Quotation", "Quotations")
                        .WithMany("PurchasingOrders")
                        .HasForeignKey("QID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Identity.User", "User")
                        .WithMany("PurchasingOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quotations");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingOrderDetail", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.PurchasingOrder", "PurchasingOrder")
                        .WithMany("PurchasingOrderDetails")
                        .HasForeignKey("POID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchasingOrder");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingRequestForQuotation", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Supplier", "Supplier")
                        .WithMany("PurchasingRequestForQuotations")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Identity.User", "User")
                        .WithMany("PurchasingRequestForQuotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingRequestProduct", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.PurchasingRequestForQuotation", "PRFQ")
                        .WithMany("PRPS")
                        .HasForeignKey("PRFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.Product", "Product")
                        .WithMany("PRPS")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PRFQ");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.QuotationDetail", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.RequestSalesQuotation", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.CustomerProfile", "CustomerProfile")
                        .WithMany("RequestSalesQuotations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.RequestSalesQuotationDetails", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Product", "Product")
                        .WithMany("RequestSalesQuotationDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.RequestSalesQuotation", "RequestSalesQuotation")
                        .WithMany("RequestSalesQuotationDetails")
                        .HasForeignKey("RequestSalesQuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RequestSalesQuotation");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotaionDetails", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.LotProduct", "LotProduct")
                        .WithMany("SalesQuotaionDetails")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.SalesQuotation", "SalesQuotation")
                        .WithMany("SalesQuotaionDetails")
                        .HasForeignKey("SqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.TaxPolicy", "TaxPolicy")
                        .WithMany("SalesQuotaionDetails")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LotProduct");

                    b.Navigation("SalesQuotation");

                    b.Navigation("TaxPolicy");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotation", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.RequestSalesQuotation", "RequestSalesQuotation")
                        .WithMany("SalesQuotations")
                        .HasForeignKey("RsqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.SalesQuotationNote", "SalesQuotationNote")
                        .WithMany("SalesQuotations")
                        .HasForeignKey("SqnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.SalesQuotationValidity", "SalesQuotationValidity")
                        .WithMany("SalesQuotations")
                        .HasForeignKey("SqvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Entities.StaffProfile", "StaffProfile")
                        .WithMany("SalesQuotations")
                        .HasForeignKey("SsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestSalesQuotation");

                    b.Navigation("SalesQuotationNote");

                    b.Navigation("SalesQuotationValidity");

                    b.Navigation("StaffProfile");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotationComment", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.SalesQuotation", "SalesQuotation")
                        .WithMany("SalesQuotationComments")
                        .HasForeignKey("SqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMS.Core.Domain.Identity.User", "User")
                        .WithMany("SalesQuotationComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesQuotation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.StaffProfile", b =>
                {
                    b.HasOne("PMS.Core.Domain.Identity.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("PMS.Core.Domain.Entities.StaffProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.WarehouseLocation", b =>
                {
                    b.HasOne("PMS.Core.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.CustomerProfile", b =>
                {
                    b.Navigation("RequestSalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.LotProduct", b =>
                {
                    b.Navigation("SalesQuotaionDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Product", b =>
                {
                    b.Navigation("LotProducts");

                    b.Navigation("PRPS");

                    b.Navigation("RequestSalesQuotationDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingOrder", b =>
                {
                    b.Navigation("PurchasingOrderDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.PurchasingRequestForQuotation", b =>
                {
                    b.Navigation("PRPS");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Quotation", b =>
                {
                    b.Navigation("PurchasingOrders");

                    b.Navigation("QuotationDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.RequestSalesQuotation", b =>
                {
                    b.Navigation("RequestSalesQuotationDetails");

                    b.Navigation("SalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotation", b =>
                {
                    b.Navigation("SalesQuotaionDetails");

                    b.Navigation("SalesQuotationComments");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotationNote", b =>
                {
                    b.Navigation("SalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.SalesQuotationValidity", b =>
                {
                    b.Navigation("SalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.StaffProfile", b =>
                {
                    b.Navigation("SalesQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("LotProducts");

                    b.Navigation("PurchasingRequestForQuotations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.TaxPolicy", b =>
                {
                    b.Navigation("SalesQuotaionDetails");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("PMS.Core.Domain.Entities.WarehouseLocation", b =>
                {
                    b.Navigation("LotProduct")
                        .IsRequired();
                });

            modelBuilder.Entity("PMS.Core.Domain.Identity.User", b =>
                {
                    b.Navigation("CustomerProfile");

                    b.Navigation("PurchasingOrders");

                    b.Navigation("PurchasingRequestForQuotations");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SalesQuotationComments");

                    b.Navigation("SentNotifications");

                    b.Navigation("StaffProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
